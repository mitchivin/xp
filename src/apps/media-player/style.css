/*
  Media Player Stylesheet
  Styles for the custom <wm-player> element, including layout, controls, and theming.
  Designed to mimic Windows Media Player 11 (XP) and support flexible theming.
*/

:host {
   display: block;
   /* Player aspect ratio and sizing variables */
   --aspect-ratio: auto;
   --min-video-width:  0;
   --min-video-height: 0;
   --max-video-width:  100%;
   --max-video-height: none;
   --scale: 1;
   /* Timestamp font sizing */
   --timestamp-force-font-size: unset;
   --timestamp-base-font-size:  12px;
   --timestamp-scale-font-size: var(--scale,1);
   --timestamp-min-font-size:   unset;
   --timestamp-max-font-size:   unset;
   /* Subtitle styling (customizable for ::cue) */
   --subtitle-background:      unset;
   --subtitle-color:           #FFF;
   --subtitle-font-family:     "Segoe UI", Arial, sans-serif;
   --subtitle-font-size:       1em;
   --subtitle-font-style:      unset;
   --subtitle-font-variant:    unset;
   --subtitle-font-weight:     unset;
   --subtitle-opacity:         unset;
   --subtitle-outline:         1px solid #000;
   --subtitle-text-decoration: unset;
   --subtitle-text-shadow:     unset;
}
:host(:fullscreen) {
   .main {
      height: 100%;
   }
}

.main {
   position: relative;
   width:  100%;
   height: 100%;
   --button-glyph-scale: var(--scale, 1);
   display: block;
   overflow: hidden;
}

.overlay-controls {
   position: absolute;
   left: 0;
   right: 0;
   bottom: 0;
   display: flex;
   flex-direction: column;
   gap: var(--overlay-controls-gap, 12px);
   padding: 0 0 var(--overlay-controls-gap, 12px) 0;
   z-index: 2;
   width: 100%;
   pointer-events: none; /* Only children receive pointer events */
   background: linear-gradient(to top, rgba(0,0,0,0.7) 60%, rgba(0,0,0,0.0) 100%);
}
.overlay-controls > * {
   pointer-events: auto;
}

.seek {
   width: auto;
   margin-left: calc(12px * var(--scale,1));
   margin-right: calc(12px * var(--scale,1));
}
.controls {
   width: 100%;
   margin: 0;
   grid-area: controls;
   position: relative;
}

/* Layout grid for player and controls */
.main {
   display: grid;
   grid-template:
      "content     content  content     " 1fr
      [lower-start]
      "seek        seek     seek        "
      ".           .        ." var(--gap-between-seek-and-controls, 0px)
      "left-gutter controls right-gutter"
      [lower-end]
      ".           .        ." var(--gap-below-controls, min-content)
      [lower-background-end]
      /
      1fr var(--controls-flex, auto) 1fr
   ;
   overflow: hidden;
   /* Expand controls tray if seek slider is inside */
   &:has(.controls .seek) {
      --controls-flex: 10fr;
   }
}
.gutter-left {
   grid-area: left-gutter;
   display: grid;
   grid-template: ". time" / 1fr auto;
   align-items: center;
}
.gutter-right {
   grid-area: right-gutter;
   display: grid;
   grid-template: ". rearrangeables" / 1fr auto;
   align-items: center;
   padding-right: calc(20px * var(--scale,1));
   .rearrangeables {
      grid-area: rearrangeables;
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
      gap: calc(var(--base-widget-gap, 6px) * var(--scale,1));
   }
}

.content {
   grid-area:  content;
   max-width:  100%;
   min-height: 0px;
   background: #000;
   display: grid;
   grid-template: "video";
   justify-items: center;
   align-items: center;
}
video {
   min-width:  var(--min-video-width, 0);
   min-height: var(--min-video-height, 0);
   max-width:  var(--max-video-width, 100%);
   max-height: var(--max-video-height, none);
   aspect-ratio: var(--aspect-ratio, auto);
   object-fit:   contain;
   width:  100%;
   height: 100%;
}
video:fullscreen {
   width: auto;
   height: 100vh;
   max-width: 100vw;
   max-height: 100vh;
   object-fit: cover;
   display: block;
   margin: 0 auto;
}
video::cue {
   background:      var(--subtitle-background);
   color:           var(--subtitle-color);
   font-family:     var(--subtitle-font-family);
   font-size:       var(--subtitle-font-size);
   font-style:      var(--subtitle-font-style);
   font-variant:    var(--subtitle-font-variant);
   font-weight:     var(--subtitle-font-weight);
   opacity:         var(--subtitle-opacity);
   outline:         var(--subtitle-outline);
   text-decoration: var(--subtitle-text-decoration);
   text-shadow:     var(--subtitle-text-shadow);
}

.seek {
   grid-area: seek;
   .main > & {
      grid-area: seek;
   }
   .controls & {
      flex: 1 0 auto;
   }
   .rearrangeables & {
      min-width: 100px;
      flex: 1 0 100px;
   }
}
:host(:state(buffering)) .seek {
   --fill-gradient: linear-gradient(to bottom, #a7c2d3, #3c587f, #90a7c5);
}
:host(:state(stalled)) .seek {
   --fill-gradient: linear-gradient(to bottom, #e2adad, #933434, #d28080);
}

.current-time {
   position: absolute;
   left: -70px;
   top: 50%;
   transform: translateY(-50%);
   z-index: 1;
   padding: 0 8px;
   text-align: left;
   font-family: "Segoe UI", Arial, sans-serif;
   color: #FFF;
   -webkit-text-stroke: 4px #000A;
   paint-order: stroke fill;
   user-select: none;
   font-size: var(--timestamp-force-font-size, 
      clamp(
         var(--timestamp-min-font-size, 0px),
         calc(var(--timestamp-base-font-size,12px) * var(--timestamp-scale-font-size,1)),
         var(--timestamp-max-font-size, 999999px)
      )
   );
   width: auto;
}

.controls {
   grid-area: controls;
   
   --height:          calc(23px * var(--scale,1));
   --base-widget-gap: calc( 6px * var(--scale,1));
   
   /* computed below, in the spritesheet code */
   --play-pause-flex-area-width:  unset;
   --play-pause-flex-area-height: unset;
   
   --play-pause-extra-thickness: calc((var(--play-pause-flex-area-height) - var(--height)) / 2);
   
   --extra-diff: calc((var(--tray-bulge-sprite-h) - var(--tray-middle-sprite-h)) * var(--tray-spritesheet-effective-scale) / 2);
   
   --play-pause-flex-area-width: var(--play-pause-button-hitbox);
   
   display: grid;
   grid-template:
      "left play right" var(--height)
      /
      var(--tray-left-flex, min-content) var(--play-pause-flex-area-width) var(--tray-right-flex, min-content)
   ;
   justify-content: center;
   align-items:     center;
   
   height:        var(--height, auto);
   margin-top:    calc(var(--play-pause-extra-thickness,0px) + var(--margin-above,0px));
   margin-bottom: calc(var(--play-pause-extra-thickness,0px) + var(--margin-below,0px));
   
   .left {
      grid-area: left;
   }
   .right {
      grid-area: right;
   }
   .play-pause {
      grid-area: play;
   }
   
   .left,
   .right {
      display:         flex;
      flex-flow:       row nowrap;
      justify-content: center;
      align-items:     center;
      gap:             var(--base-widget-gap, calc(6px*var(--scale,1)));
      
      height: var(--height);
   }
   
   /*
      If the seek slider is moved into either side of the controls tray, we 
      want that side of the tray to expand as much as possible.
   */
   &:has(.left .seek) {
      --tray-left-flex: 1fr;
   }
   &:has(.right .seek) {
      --tray-right-flex: 1fr;
   }
}

.controls {
   /*
      The spritesheet being configured here is for when controls are overlaid 
      (i.e. WMP's "Now Playing" view). These variables are redefined as needed 
      for the other player themes.
   */
   --height:  calc(62px * var(--scale,1) / (2 * 0.92));
   --padding: calc(4px * var(--scale,1));
   
   --tray-spritesheet:            url(assets/spritesheet-tray-background-overlay.svg);
   --tray-spritesheet-w-unitless: 96;
   --tray-spritesheet-w:          calc(1px * var(--tray-spritesheet-w-unitless));
   --tray-spritesheet-h:          416px;
   --tray-spritesheet-scale:      calc(2 * 0.96);
   
   --tray-endcap-sprite-w: 32px;
   --tray-endcap-sprite-h: 63px;
   
   --tray-middle-sprite-y: 64px;
   --tray-middle-sprite-h: 63px;
   
   --tray-bulge-sprite-y: 128.5px;
   --tray-bulge-sprite-w: 69px;
   --tray-bulge-sprite-h: 96px;
   
   --tray-spritesheet-effective-scale: calc(var(--scale,1) / var(--tray-spritesheet-scale));
   --tray-spritesheet-effective-size:
      calc(var(--tray-spritesheet-w) * var(--tray-spritesheet-effective-scale))
      calc(var(--tray-spritesheet-h) * var(--tray-spritesheet-effective-scale))
   ;
   --tray-bulge-effective-w: calc(var(--tray-bulge-sprite-w) * var(--tray-spritesheet-effective-scale));
   --tray-bulge-effective-h: calc(var(--tray-bulge-sprite-h) * var(--tray-spritesheet-effective-scale));
   
   --play-pause-flex-area-width:  var(--tray-bulge-effective-w);
   --play-pause-flex-area-height: var(--tray-bulge-effective-h);
   
   .left,
   .right {
      --tray-endcap-effective-w: calc(var(--tray-endcap-sprite-w) * var(--tray-spritesheet-effective-scale));
      --tray-endcap-effective-h: calc(var(--tray-endcap-sprite-h) * var(--tray-spritesheet-effective-scale));
      
      order: -1;
      
      box-sizing: border-box;
      background:
         var(--tray-spritesheet)
         left calc(-1 * var(--tray-middle-sprite-y) * var(--tray-spritesheet-effective-scale))
         /
         var(--tray-spritesheet-effective-size)
         repeat-x
         padding-box padding-box
      ;
      
      position: relative;
      &::before {
         content:  " ";
         display:  block;
         width:    var(--tray-endcap-effective-w);
         position: absolute;
         top:      0;
         bottom:   0;
         right:    100%;
         background:
            var(--tray-spritesheet)
            var(--endcap-position-x) 0
            /
            var(--tray-spritesheet-effective-size)
            no-repeat
            border-box border-box
         ;
      }
      &.right::before {
         right: auto;
         left:  100%;
      }
   }
   .left {
      --endcap-position-x: 0;
      border-left:   var(--tray-endcap-effective-w) solid transparent;
      padding-right: var(--padding);
   }
   .right {
      --endcap-position-x: right;
      border-right: var(--tray-endcap-effective-w) solid transparent;
      padding-left: var(--padding);
   }
   
   &::before {
      grid-area: play;
      justify-self: center;
      align-self: center;
      
      content: " ";
      width:   var(--tray-bulge-effective-w);
      height:  var(--tray-bulge-effective-h);
      background:
         var(--tray-spritesheet)
         left calc(-1 * var(--tray-bulge-sprite-y) * var(--tray-spritesheet-effective-scale))
         /
         var(--tray-spritesheet-effective-size)
         no-repeat
      ;
   }
   
   /*
      Account for changes to the control layouts which leave either side 
      of the tray empty.
   */
   .left:empty,
   .right:empty {
      display: none;
   }
   &:has(.left:empty):has(.right:not(:empty)),
   &:has(.right:empty):has(.left:not(:empty)) {
      --tray-bulge-sprite-y: 224px;
      --tray-bulge-sprite-w: 82.595px;
      --tray-bulge-sprite-h: 96px;
      
      --tray-bulge-button-displacement: calc(5px*var(--scale,1));
   }
   
   &:has(.left:empty ~ .right:not(:empty)) {
      .play-pause {
         margin-left: var(--tray-bulge-button-displacement);
      }
   }
   &:has(.left:not(:empty) ~ .right:empty) {
      .play-pause {
         margin-right: var(--tray-bulge-button-displacement);
      }
      &::before {
         transform: scale(-100%, 100%);
      }
   }
   &:has(.left:empty):has(.right:empty) {
      --tray-bulge-sprite-y: 320px;
      --tray-bulge-sprite-w: 96px;
      --tray-bulge-sprite-h: 96px;
   }
}

.controls hr {
   width:  1.5px;
   height: calc(19px * var(--scale,1));
   background: #CECDCF;
   border: 0;
}

.play-pause {
   grid-area: play;
   justify-self: center;
}

.volume {
   width: calc(67px * var(--scale,1));
   height: calc(30px * var(--scale,1));
   margin-left: calc(4px * var(--scale,1));
}

/*
   As it turns out, the spacing between buttons in the WMP player UI 
   is... all over the place. Including button glass:
   
    - ~6px between the lefthand endcap and Shuffle
    -  6px between Shuffle and Loop
    - ~9px between Loop and the separator
    - ~8px between the separator and Stop
    -  9px between Stop and Prev
    - 12px between Next and Mute
    - 10px between Mute and the volume slider track
    
   Notably, if you've got the volume at 50%, then the Mute glyph (not 
   the glass) is roughly 16px away from both the Prev button glass 
   and the volume slider track. Similarly, the Stop glyph (not the 
   glass) is roughly 14px from the separator and the Prev button. So 
   Microsoft designed the controls so that the spacing would appear 
   balanced when the UI is in a non-interacted-with state, i.e. when 
   no hover-only button glass is visible. Unfortunately, we lay out 
   the controls based on their hitboxes, which to some extent reflect 
   the glass sizes, so we're... gonna have to get creative.
   
   We've set the baseline spacing between buttons to 6px, so we'll go 
   from there. We use `--button-glyph-scale` to ensure relatively 
   consistent spacing when controls are overlaid, but it looks like 
   WMP uses fairly different spacing in that case, so we're not 100% 
   accurate there.
   
   As of this writing, I want to implement rearranging the control 
   layout, but haven't yet. These styles, then, shouldn't target any 
   specific button, but rather should target the various button styles 
   based on their locations relative to one another.
*/
:is(.controls, .rearrangeables) {
   --base-widget-gap: calc(6px * var(--button-glyph-scale,1));
   hr {
      margin: 0 calc(3px*var(--button-glyph-scale,1));
   }
   .basic-button + .prev-rw {
      margin-left: calc(3px*var(--button-glyph-scale,1));
   }
   .next-ff + .basic-button {
      margin-left: calc(6px*var(--button-glyph-scale,1));
   }
   .basic-button + .volume {
      margin-left: calc(4px*var(--button-glyph-scale,1));
   }
   
   /* account for widgets being placed directly next to the play/pause button */
   .left .seek:last-child {
      margin-right: calc(4px*var(--scale,1));
   }
   .right .seek:first-child {
      margin-left: calc(4px*var(--scale,1));
   }
   .left .basic-button:last-child {
      margin-right: calc(10px*var(--scale,1));
   }
   .right .basic-button:first-child {
      margin-left: calc(10px*var(--scale,1));
   }
}


/*
   THEMES
*/

:host(:not([data-overlay-controls])) .controls,
:host([data-overlay-controls="video-only" i]) .main:not(.video) .controls {
   --height:  calc(31px * var(--scale,1));
   --padding: 4px;
   
   --tray-spritesheet:            url(assets/spritesheet-tray-background-non-overlay.svg#lite);
   --tray-spritesheet-w-unitless: 52;
   --tray-spritesheet-w:          calc(1px * var(--tray-spritesheet-w-unitless));
   --tray-spritesheet-h:          219px;
   --tray-spritesheet-scale:      1;
   
   --tray-endcap-sprite-w: 15.5px;
   --tray-endcap-sprite-h: 31px;
   
   --tray-middle-sprite-y: 32px;
   --tray-middle-sprite-h: 31px;
   
   --tray-bulge-sprite-y: 63px;
   --tray-bulge-sprite-w: 40.497px;
   --tray-bulge-sprite-h: 51px;
   
   --extra-diff: calc((var(--tray-bulge-sprite-h) - var(--tray-middle-sprite-h)) * var(--tray-spritesheet-effective-scale) / 2);
   
   /* fake a 1.5px width using a mask, since browsers round everything */
   hr {
      width: 2px;
      mask: linear-gradient(to right, #FFF, #FFF 50%, #000) 0 0/2px 100%;
   }
   
   /*
      Account for changes to the control layouts which leave either side 
      of the tray empty.
   */
   &:has(.left:empty):has(.right:not(:empty)),
   &:has(.right:empty):has(.left:not(:empty)) {
      --tray-bulge-sprite-y: 115px;
      --tray-bulge-sprite-w: 45.747px;
      --tray-bulge-sprite-h: 51px;
   }
   &:has(.left:empty):has(.right:empty) {
      --tray-bulge-sprite-y: 167px;
      --tray-bulge-sprite-w: 51px;
      --tray-bulge-sprite-h: 51px;
   }
}
:host([data-overlay-controls]:not([data-overlay-controls="video-only" i])) .main,
:host([data-overlay-controls="video-only" i]) .main.video {
   --requested-scale: var(--scale);
   .controls {
      /*
         In WMP's Now Playing view, player controls are overlaid 
         on the playing media. The controls are rendered at 92% 
         scale, but the icon glyphs that serve as button labels 
         remain at 100% scale.
         
         Notably, elements like the seek slider and the current 
         timestamp are also not downscaled.
      */
      --scale: calc(var(--requested-scale,1) * 0.92);
      --button-glyph-scale: var(--requested-scale,1);
   }
   --gap-between-seek-and-controls: 12px;
   --gap-below-controls: 12px;
   
   .content {
      grid-row: 1 / span 100;
      
      /*
         TODO: We need to move cues out from below the video 
      */
   }
   .seek:not(.controls *) {
      margin-left: calc(12px * var(--scale,1));
      margin-right: calc(12px * var(--scale,1));
   }
   .current-time {
      color: #FFF;
      -webkit-text-stroke: 4px #000A;
      padding-right: calc(10px * var(--scale,1));
   }
   .controls {
      hr {
         background:      #00000040;
         background-clip: content-box;
         border:          calc(1px*var(--scale,1)) solid #FFFFFF20;
         width:           calc(1px*var(--scale,1));
         border-radius:   calc(2px*var(--scale,1));
      }
   }
}
:host([data-theme="dark" i]:not([data-overlay-controls])) .main,
:host([data-theme="dark" i][data-overlay-controls="video-only"]) .main:not(.video) {
   /*
      Styles for the dark theme used by WMP 11 on Windows XP.
   */
   
   /* background */
   --tray-background-height: calc(69px*var(--scale,1));
   &::before {
      content: " ";
      grid-row:    lower-start / lower-background-end;
      grid-column: 1 / span 3;
      order: -2;
      z-index: -2;
      
      background:
         url(assets/spritesheet-tray-background-dark.svg#middle) left top/1px var(--tray-background-height) repeat-x
      ;
   }
   &::after {
      --endcap-outset: calc(-78px * var(--scale,1));
      --endcap-border-width: calc(110px * var(--scale,1));
      
      content: " ";
      
      grid-row:    lower-start / lower-background-end;
      grid-column: controls-start / controls-end;
      z-index:    -1;
      
      margin:     0 var(--endcap-outset);
      min-height: var(--tray-background-height);
      border-image:
         url(assets/spritesheet-tray-background-dark.svg)
         69 110 0 110 / var(--tray-background-height) var(--endcap-border-width) 0 var(--endcap-border-width)
         stretch space
      ;
      min-width: calc(var(--endcap-border-width) * 2);
   }
   
   .seek:not(.controls *) {
      padding-top: calc(5px*var(--scale,1));
      margin:      calc(2px*var(--scale,1)) calc(5px*var(--scale,1));
      
      --track-border-color-upper: #444b5e;
      --track-border-color-lower: #656e86;
   }
   .current-time {
      color: #FFF;
      -webkit-text-stroke: 0px;
      
      /*
         Displace the timestamp out of the "curve" around the tray.
      */
      padding-right: calc(51px * var(--scale,1));
   }
   
   .controls {
      --tray-spritesheet: url(assets/spritesheet-tray-background-non-overlay.svg#dark);
      
      margin:  calc(var(--extra-diff) - 3px * var(--scale,1)) 0 var(--extra-diff) 0;
      
      hr {
         background: linear-gradient(to bottom, #2a2d35, #2a2d35, #131415, #2a2e37);
      }
   }
}
/* --- End media-player.css --- */

/* --- Begin media-player.slider.css --- */
:host {
   position:   relative;
   min-height: var(--track-height);
   max-width:  100%;
   user-select: none;
   --minimum: 0;
   --maximum: 100;
   --value:   0;
   --fill-gradient: linear-gradient(to bottom, #7fc9fa, #014cb6, #619ff2);
   --track-border-color-upper: #A8A8A9;
   --track-border-color-lower: #CECDCF;
   /* private */
   --track-height: calc(4px * var(--scale, 1));
}

.track-full,
.track-bare,
.thumb {
   cursor: pointer;
}

.track-full,
.track-bare {
   position: absolute;
   height:   var(--track-height);
   
   top: 50%;
   transform: translate(0, -50%);
}

.track-bare {
   box-sizing: border-box;
   width: 100%;
   
   border: calc(1px * var(--scale, 1)) solid var(--track-border-color-upper);
   border-top-color: var(--track-border-color-upper);
   border-bottom-color: var(--track-border-color-lower);
   border-radius: calc(2px * var(--scale, 1));
}
.track-full {
   --radius: calc(2px * var(--scale, 1));
   
   left:  0;
   width: calc(100% * (var(--value) / var(--maximum)));
   
   border-radius: var(--radius) 0 0 var(--radius);
   background: var(--fill-gradient) left calc(1px * var(--scale, 1))/1px calc(3px * var(--scale, 1)) repeat-x;
}

.thumb {
   --width: calc(15px * var(--scale, 1));
   
   position:  absolute;
   left:      calc((100% - var(--width)) * (var(--value) / var(--maximum)));
   top:       50%;
   transform: translate(0, -50%);
   width:     var(--width);
   
   --visible-width:  var(--width);
   --visible-height: calc(8px * var(--scale, 1));
}

:host(:not(.constant-thumb)) .thumb {
   /*
      Windows Media Player hides the seek slider thumb when we're at exactly zero.
   */
   --show-thumb: min(var(--value) * var(--value) * 9999999, 1);
   
   width:  calc(var(--width) * var(--show-thumb, 0));
   height: calc(4px * var(--scale, 1));
   
   background:
      linear-gradient(315deg, #c5fcffc0, #c5fcff50, #c5fcff00) right calc(1px * var(--scale, 1))/var(--width) calc(3px * var(--scale, 1)) no-repeat,
      var(--fill-gradient) left calc(1px * var(--scale, 1))/1px calc(3px * var(--scale, 1)) repeat-x
   ;
   
   /* what rows represent what glyphs */
   --glyph-row-loop:       0;
   --glyph-row-shuffle:    1;
   --glyph-row-stop:       2;
   --glyph-row-volume:     3;
   --glyph-row-fullscreen: 4;
   
   /* what columns represent what variants */
   --glyph-col-off:      0;
   --glyph-col-on:       1;
   --glyph-col-enabled:  0;
   --glyph-col-fullscreen-enter-enabled:  0;
   --glyph-col-fullscreen-enter-disabled: 1;
   --glyph-col-fullscreen-exit-enabled:   2;
   --glyph-col-fullscreen-exit-disabled:  3;
   
   /* Icons: */
   
   &.loop {
      --glyph-current-row: var(--glyph-row-loop);
   }
   &.shuffle {
      --glyph-current-row: var(--glyph-row-shuffle);
   }
   &.loop,
   &.shuffle {
      --glyph-current-col: var(--glyph-col-off);
      &:checked {
         --glyph-current-col: var(--glyph-col-on);
      }
   }
   
   &.stop {
      --glyph-current-row: var(--glyph-row-stop);
      --glyph-current-col: var(--glyph-col-enabled);
   }
   
   &.mute {
      --glyph-current-row: var(--glyph-row-volume);
      --glyph-current-col: 3;
      &[data-glyph="empty"] {
         --glyph-current-col: 0;
      }
      &[data-glyph="low"] {
         --glyph-current-col: 1;
      }
      &[data-glyph="medium"] {
         --glyph-current-col: 2;
      }
      &[data-glyph="high"] {
         --glyph-current-col: 3;
      }
      &:checked {
         --glyph-current-col: 4;
      }
   }
   
   &.fullscreen {
      --glyph-current-row: var(--glyph-row-fullscreen);
      --glyph-current-col: var(--glyph-col-fullscreen-enter-enabled);
      &:disabled {
         --glyph-current-col: var(--glyph-col-fullscreen-enter-disabled);
      }
      &.exit {
         --glyph-current-col: var(--glyph-col-fullscreen-exit-enabled);
         &:disabled {
            --glyph-current-col: var(--glyph-col-fullscreen-exit-disabled);
         }
      }
   }
}
:host(.circular-thumb) .thumb {
   --visible-width:  calc(12px * var(--scale, 1));
   --visible-height: calc(12px * var(--scale, 1));
}

:host(.constant-thumb) .thumb,
:host(:hover) .thumb {
   --sprite: url(assets/spritesheet-slider-thumb.svg#normal);
}
:host(:hover:not(:active):not(:state(active))) .thumb:hover {
   --sprite: url(assets/spritesheet-slider-thumb.svg#hover);
}
:host(:active) .thumb,
:host(:state(active)) .thumb {
   --sprite: url(assets/spritesheet-slider-thumb.svg#active);
}
:host(:disabled) .thumb {
   display: none;
}


:host(.constant-thumb) .thumb,
:host(:hover) .thumb,
:host(:active) .thumb,
:host(:state(active)) .thumb {
   --corner-size: calc(var(--visible-height) / 2);
   
   width:  var(--visible-width);
   height: var(--visible-height);
   
   left: calc((100% - var(--visible-width)) * (var(--value) / var(--maximum)));
   top:  50%;
   transform: translate(0, -50%);
   
   background: transparent none;
   border-image: var(--sprite) 50% 49.9% / var(--corner-size) var(--corner-size);
}
/* --- End media-player.slider.css --- */

/* --- Begin media-player.buttons.css --- */
/*
   DECLARATIVE SPRITESHEETS
*/
:where(.controls button),
:where(.basic-button) {
   /**************************************************************\
      BASELINE STYLES
   \**************************************************************/
   
   all:            unset;
   appearance:     none;
   display:        inline-block;
   user-select:    none;
   color:          transparent;
   pointer-events: none;
   position:       relative;
   
   &::before,
   &::after {
      content:  " ";
      position: absolute;
      display:  block;
   }
   &::before {
      --pos-x: calc(var(--glass-x) * var(--glass-sprite-effective-scale));
      --pos-y: calc(var(--glass-y) * var(--glass-sprite-effective-scale));
      
      left: var(--glass-pos-x);
      top:  var(--glass-pos-y);
      
      /*
         Fix for sub-pixel rounding errors: have the sub-pixel positioning 
         be done on the GPU so that there isn't actually any rounding.
      */
         left: var(--glass-pos-x-ipart);
         transform: translate3d(var(--glass-pos-x-fpart), 0, 0);
         
         /*
            HACK: Tweak the transform further in Firefox, to try and 
            improve how the Play/Pause button lines up with its space 
            in the tray background.
         */
         -moz-transform: translate3d(calc(var(--glass-pos-x-fpart) * 1.2), 0, 0);
      
      width:  var(--glass-sprite-effective-width);
      height: var(--glass-sprite-effective-height);
      background: var(--glyph-background), var(--glass-background);
   }
   &::after {
      pointer-events: auto;
      inset: 0;
   }
   
   /*
      FOCUS HELPER STYLES
      
      The `all: unset` property blew away the element's default outlines; we 
      need to restore the focus ring. Luckily, Firefox and Chrome/WebKit all 
      offer non-standard ways to force native focus ring styles.
   */
   &:focus-visible {
      outline: medium auto #000;
      outline: medium auto highlight; /* Firefox */
      outline: medium auto -webkit-focus-ring-color; /* Chromium, WebKit */
   }
   
   /**************************************************************\
      BUTTON GLASS
   \**************************************************************/
   
   /*
      The "glass" is the physical button, not including any text or icon that 
      it has been labeled with. For example, the Play/Pause button is a blue 
      "jewel" with a white icon serving as a label; that jewel is the "glass." 
      All buttons have "glass," though for some button types, the glass isn't 
      actually visible except on hover or activation.
   */
   
   /* REQUIRED INPUTS:
   
      --glass-spritesheet
         The url() of the spritesheet.
   
      --glass-sprite-width
      --glass-sprite-height
         The size of the sprite, in its native SVG units, as a 
         CSS px quantity.
   */
   --glass-sprite-scale: 1; /* scale at which the sprite was authored */
   --glass-sprite-count: 4;
   --glass-x: 0px; /* offset, relative to the hitbox, in the sprite's SVG units */
   --glass-y: 0px; /* offset, relative to the hitbox, in the sprite's SVG units */
   
   /* STATE */
   --glass-current-sprite: 0;
   &:hover {
      --glass-current-sprite: 1;
   }
   &:active {
      --glass-current-sprite: 2;
   }
   &:disabled {
      --glass-current-sprite: 3;
   }
   
   /* COMPUTED */
   --glass-sprite-effective-scale:  calc(var(--scale,1) / var(--glass-sprite-scale));
   --glass-sprite-effective-width:  calc(var(--glass-sprite-width) * var(--glass-sprite-effective-scale));
   --glass-sprite-effective-height: calc(var(--glass-sprite-height) * var(--glass-sprite-effective-scale));
   
   /*
      The --glass-pos-x and --glass-pos-y variables are needed to 
      position the pseudo-element.
   
      We also decompose the X-position into its integer part and 
      fractional part, so we can fiddle with browsers' sub-pixel 
      rounding in some other styles.
   */
   --glass-pos-x: calc(var(--glass-x) * var(--glass-sprite-effective-scale));
   --glass-pos-y: calc(var(--glass-y) * var(--glass-sprite-effective-scale));
   --glass-pos-x-ipart: round(var(--glass-pos-x), 1px);
   --glass-pos-x-fpart: calc(var(--glass-pos-x) - var(--glass-pos-x-ipart));
   
   --glass-background:
      var(--glass-spritesheet)
      /*pos-x*/  calc(-1 * var(--glass-current-sprite) * var(--glass-sprite-effective-width))
      /*pos-y*/  0
      /
      /*width*/  calc(var(--glass-sprite-count) * var(--glass-sprite-effective-width))
      /*height*/ calc(var(--glass-sprite-effective-height))
      no-repeat
   ;
   
   /**************************************************************\
      BUTTON GLYPHS
   \**************************************************************/
   
   /*
      The "glyphs" are the icons that are used to label the buttons, 
      e.g. the right-facing triangle on the "Play" button.
      
      Glyphs are usually scaled consistently with the glass, but in 
      some cases, you may wish to scale them differently. As such, 
      glyphs prioritize `--button-glyph-scale` over `--scale`. Note 
      that since glass and glyphs exist as background-images on the 
      same pseudo-element (which is sized based on the glass), you 
      can't make the scales diverge too far or you'll get broken 
      visuals. For the intended use case (mimicking WMP's "Now 
      Playing" view), where the glass is at 92% and the glyphs are 
      at 100%, this implementation is sufficient.
   */
   
   /* REQUIRED INPUTS:
   
      --glyph-spritesheet
         As above.
      
      --glyph-spritesheet-rows
      --glyph-spritesheet-cols
         The number of rows and columns in the spritesheet.
      
      --glyph-sprite-width
      --glyph-sprite-height
         As above.
   */
   --glyph-sprite-scale: 1;
   --glyph-x: 0px; /* offset, relative to the hitbox */
   --glyph-y: 0px; /* offset, relative to the hitbox */
   
   /* STATE */
   --glyph-current-row: 0;
   --glyph-current-col: 0;
   
   /* COMPUTED */
   --glyph-sprite-effective-scale:  calc(var(--button-glyph-scale,var(--scale,1)) / var(--glyph-sprite-scale));
   --glyph-sprite-effective-width:  calc(var(--glyph-sprite-width) * var(--glyph-sprite-effective-scale));
   --glyph-sprite-effective-height: calc(var(--glyph-sprite-height) * var(--glyph-sprite-effective-scale));
   
   /*
      We want it to be possible to scale the button glyphs separately from 
      the glass sprites. Glyphs should scale from the center, so we need 
      to compute the centerpoint of the glyph, scale it by the glass scale, 
      and then displace it by half the glyph's (glyph-scale) size.
   */
   --glyph-center-x: calc(var(--glyph-x) + var(--glyph-sprite-width)  / 2);
   --glyph-center-y: calc(var(--glyph-y) + var(--glyph-sprite-height) / 2);
   --glyph-sprite-effective-x: calc(
      var(--glyph-center-x) * var(--glass-sprite-effective-scale)
      -
      (var(--glyph-sprite-effective-width) / 2)
      -
      (var(--glass-x) * var(--glass-sprite-effective-scale))
   );
   --glyph-sprite-effective-y: calc(
      var(--glyph-center-y) * var(--glass-sprite-effective-scale)
      -
      (var(--glyph-sprite-effective-height) / 2)
      -
      var(--glass-y) * var(--glass-sprite-effective-scale)
   );
   
   --glyph-background:
      var(--glyph-spritesheet)
      /*pos-x*/  calc(var(--glyph-sprite-effective-x) - var(--glyph-current-col) * var(--glyph-sprite-effective-width))
      /*pos-y*/  calc(var(--glyph-sprite-effective-y) - var(--glyph-current-row) * var(--glyph-sprite-effective-height))
      /
      /*width*/  calc(var(--glyph-spritesheet-cols) * var(--glyph-sprite-effective-width))
      /*height*/ calc(var(--glyph-spritesheet-rows) * var(--glyph-sprite-effective-height))
      no-repeat
   ;
}

/*
   STYLES FOR SPECIFIC BUTTONS
*/
.basic-button {
   width:  calc(23px * var(--scale,1));
   height: calc(23px * var(--scale,1));
   
   --glass-spritesheet:   url(assets/spritesheet-generic.svg);
   --glass-sprite-width:  58px;
   --glass-sprite-height: 60px;
   --glass-sprite-scale:  2;
   --glass-x: -8px;
   --glass-y: -4px;
   
   --glyph-spritesheet:      url(assets/spritesheet-glyphs-general.svg);
   --glyph-spritesheet-rows: 5;
   --glyph-spritesheet-cols: 5;
   --glyph-x: -1.5px;
   --glyph-y: -2px;
   --glyph-sprite-width:  50px;
   --glyph-sprite-height: 50px;
   --glyph-sprite-scale:  2;
   
   /* what rows represent what glyphs */
   --glyph-row-loop:       0;
   --glyph-row-shuffle:    1;
   --glyph-row-stop:       2;
   --glyph-row-volume:     3;
   --glyph-row-fullscreen: 4;
   
   /* what columns represent what variants */
   --glyph-col-off:      0;
   --glyph-col-on:       1;
   --glyph-col-enabled:  0;
   --glyph-col-fullscreen-enter-enabled:  0;
   --glyph-col-fullscreen-enter-disabled: 1;
   --glyph-col-fullscreen-exit-enabled:   2;
   --glyph-col-fullscreen-exit-disabled:  3;
   
   /* Icons: */
   
   &.loop {
      --glyph-current-row: var(--glyph-row-loop);
   }
   &.shuffle {
      --glyph-current-row: var(--glyph-row-shuffle);
   }
   &.loop,
   &.shuffle {
      --glyph-current-col: var(--glyph-col-off);
      &:checked {
         --glyph-current-col: var(--glyph-col-on);
      }
   }
   
   &.stop {
      --glyph-current-row: var(--glyph-row-stop);
      --glyph-current-col: var(--glyph-col-enabled);
   }
   
   &.mute {
      --glyph-current-row: var(--glyph-row-volume);
      --glyph-current-col: 3;
      &[data-glyph="empty"] {
         --glyph-current-col: 0;
      }
      &[data-glyph="low"] {
         --glyph-current-col: 1;
      }
      &[data-glyph="medium"] {
         --glyph-current-col: 2;
      }
      &[data-glyph="high"] {
         --glyph-current-col: 3;
      }
      &:checked {
         --glyph-current-col: 4;
      }
   }
   
   &.fullscreen {
      --glyph-current-row: var(--glyph-row-fullscreen);
      --glyph-current-col: var(--glyph-col-fullscreen-enter-enabled);
      &:disabled {
         --glyph-current-col: var(--glyph-col-fullscreen-enter-disabled);
      }
      &.exit {
         --glyph-current-col: var(--glyph-col-fullscreen-exit-enabled);
         &:disabled {
            --glyph-current-col: var(--glyph-col-fullscreen-exit-disabled);
         }
      }
   }
}
:host(:is([data-overlay-controls], [data-theme="dark" i])) .basic-button {
   --glyph-spritesheet: url(assets/spritesheet-glyphs-general.svg#theater);
}

/*
   PLAY/PAUSE BUTTON
*/
.play-pause {
   --diameter: calc(43px * var(--scale,1));
   --radius:   calc(var(--diameter) / 2);
   
   width:     var(--diameter);
   height:    var(--diameter);
   
   &::after {
      clip-path: ellipse(var(--radius) var(--radius) at center center);
   }
   
   --glass-spritesheet:   url(assets/spritesheet-jewel.svg);;
   --glass-sprite-width:  100px;
   --glass-sprite-height: 100px;
   --glass-sprite-scale:  2;
   
   --glass-x: -7px;
   --glass-y: -8px;
   
   --glyph-spritesheet:      url(assets/spritesheet-glyphs-play-pause.svg);
   --glyph-spritesheet-rows: 1;
   --glyph-spritesheet-cols: 2;
   
   --glyph-sprite-width:  100px;
   --glyph-sprite-height: 100px;
   --glyph-sprite-scale:  2;
   
   --glyph-x: -7px;
   --glyph-y: -7px;
   
   --glyph-current-col: 0;
}
:host(:state(playing)) .play-pause {
   --glyph-current-col: 1;
}

/*
   PREV/NEXT BUTTONS
*/
.prev-rw,
.next-ff {
   width:  calc(48px * var(--scale, 1));
   height: calc(23px * var(--scale, 1));
   
   &::after {
      /* so we don't need a million calc()s in the clip-path, set 
         the font-size */
      font-size: calc(1px * var(--scale, 1));
      clip-path: polygon(
          1em    0em,
         40.5em  0em,
         44.2em  1em,
         46.2em  3em,
         47.1em  5em,
         47.5em  7em,
         48em   11.5em,
         47.5em 16em,
         47.1em 18em,
         46.2em 20em,
         44.2em 22em,
         40.5em 23em,
          1em   23em,
          0em   22em,
          1em   19em,
          2em   14em,
          2em   11.5em,
          2em    9em,
          1em    4em,
          0em    1em
      );
   }
   
   --glass-spritesheet:   url(assets/spritesheet-next.svg);
   --glass-sprite-count:  5;
   --glass-sprite-width:  112px;
   --glass-sprite-height:  70px;
   --glass-sprite-scale:      2;
   
   --glass-x:  -5px;
   --glass-y: -12px;
   
   --glyph-spritesheet:      url(assets/spritesheet-glyphs-next.svg);
   --glyph-spritesheet-rows: 2;
   --glyph-spritesheet-cols: 2;
   
   --glyph-sprite-width:  112px;
   --glyph-sprite-height:  70px;
   --glyph-sprite-scale:      2;
   
   --glyph-x:  -3px;
   --glyph-y: -12px;
   
   --glyph-current-row: var(--glyph-row-primary);
   --glyph-current-col: var(--glyph-col-enabled);
   
   /* what rows represent what glyphs */
   --glyph-row-primary:   1;
   --glyph-row-secondary: 0;
   
   /* what columns represent what variants */
   --glyph-col-enabled:  0;
   
   /*
   &:disabled {
      --glyph-current-col: var(--glyph-col-disabled);
   }
   */
   
   :host(:is([data-theme="dark" i])) & {
      --glyph-spritesheet: url(assets/spritesheet-glyphs-next.svg#white);
   }
   :host(:is([data-overlay-controls]:not([data-overlay-controls="video-only"]))) &,
   :host(:is([data-overlay-controls="video-only"])) .main.video & {
      --glyph-spritesheet: url(assets/spritesheet-glyphs-next.svg#overlay);
      &:not(:hover, :active),
      &:disabled {
         --glass-current-sprite: 4;
      }
   }
   
   &.fast-forward,
   &.can-only-fast-forward,
   &.rewind,
   &.can-only-rewind {
      --glyph-current-row: var(--glyph-row-secondary);
   }
}
.prev-rw {
   &::before {
      /*
         Transforming both elements separately will result in worse 
         sub-pixel rounding errors, causing vertical displacement at 
         some sizes. Moving the sub-pixel transform hack out to the 
         whole button, so that it's done in tandem with the rotation, 
         seems to fix this.
         
         NOTE: Having just one transform seems to work best on Chrome,
         but Chrome needs additional help when dealing with overlaid 
         controls (i.e. glass at 92% scale).
      */
      transform: none;
   }
   transform-box:     content-box;
   transform-origin:  center center;
   transform:         scale(-100%, 100%);
   -moz-transform:    scale(-100%, 100%) translate3d(var(--glass-pos-x-fpart), 0, 0);
   -webkit-transform: scale(-100%, 100%) translate(0, 0.5px);
}

.basic-button:disabled,
.controls button:disabled,
.play-pause:disabled,
.prev-rw:disabled,
.next-ff:disabled {
    cursor: default;
    opacity: 0.5;
}
/* --- End media-player.buttons.css --- */

/* Only show pointer cursor on interactive controls and slider thumb */
.basic-button,
.controls button,
.play-pause,
.prev-rw,
.next-ff {
    cursor: pointer;
}

wm-slider,
wm-slider .thumb {
    cursor: pointer;
}

/* Remove pointer from .track-full and .track-bare */
.track-full,
.track-bare {
    cursor: default;
}
/* --- End media-player.buttons.css --- */ 